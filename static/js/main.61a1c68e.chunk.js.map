{"version":3,"sources":["logo.svg","Person/Person.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","person","props","className","onClick","click","name","age","children","type","onChange","changed","value","App","state","persons","id","otherSate","showPersons","deletePersonsHandler","personIndex","splice","setState","nameChangeHandler","event","findIndex","p","target","togglePersonsHandler","doesShow","style","personsWithConditions","this","map","index","bind","key","backgroundColor","classes","length","push","join","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uJAAAA,EAAOC,QAAU,IAA0B,kC,8JCkB5BC,G,kBAfA,SAACC,GAKhB,OACI,yBAAKC,UAAU,UACX,uBAAGC,QAASF,EAAMG,OAAlB,SAAgCH,EAAMI,KAAtC,aAAsDJ,EAAMK,IAA5D,aACA,2BAAIL,EAAMM,UACV,2BAAOC,KAAK,OAAOC,SAAUR,EAAMS,QAASC,MAAOV,EAAMI,UCgIlDO,E,4MAnIbC,MAAQ,CACNC,QAAU,CACR,CAACC,GAAG,IAAKV,KAAK,MAAMC,IAAI,IACxB,CAACS,GAAG,IAAKV,KAAK,QAAQC,IAAI,GAC1B,CAACS,GAAG,IAAKV,KAAK,SAAUC,IAAI,IAE9BU,UAAU,mBACVC,aAAY,G,EAkBZC,qBAAuB,SAACC,GAQtB,IAAML,EAAO,YAAO,EAAKD,MAAMC,SAC/BA,EAAQM,OAAOD,EAAY,GAC3B,EAAKE,SAAS,CAACP,QAAQA,K,EAGxBQ,kBAAoB,SAACC,EAAOR,GAC3B,IAAMI,EAAc,EAAKN,MAAMC,QAAQU,WAAU,SAAAC,GAC/C,OAAOA,EAAEV,KAAOA,KAGZf,EAAM,eACP,EAAKa,MAAMC,QAAQK,IAExBnB,EAAOK,KAAOkB,EAAMG,OAAOf,MAC3B,IAAMG,EAAO,YAAQ,EAAKD,MAAMC,SAChCA,EAAQK,GAAenB,EACvB,EAAKqB,SAAS,CAACP,QAAQA,K,EAEzBa,qBAAuB,WACpB,IAAMC,EAAW,EAAKf,MAAMI,YAC5B,EAAKI,SAAS,CAACJ,aAAaW,K,uDAItB,IAAD,OACAC,EAAQ,GAQXC,EAAwB,KAIzBC,KAAKlB,MAAMI,cACZa,EACA,6BAGEC,KAAKlB,MAAMC,QAAQkB,KAAI,SAAChC,EAAOiC,GAC9B,OAAO,kBAAC,EAAD,CACL7B,MAAS,EAAKc,qBAAqBgB,KAAK,EAAKD,GAC7C5B,KAAML,EAAOK,KACbC,IAAMN,EAAOM,IACb6B,IAAKnC,EAAOe,GACZL,QAAS,SAACa,GAAD,OAAW,EAAKD,kBAAkBC,EAAMvB,EAAOe,WAY5Dc,EAAMO,gBAAkB,OAI3B,IAAIC,EAAU,GAQb,OAPEN,KAAKlB,MAAMC,QAAQwB,QAAS,GAC7BD,EAAQE,KAAK,OAEZR,KAAKlB,MAAMC,QAAQwB,QAAS,GAC9BD,EAAQE,KAAK,QAIX,yBAAKrC,UAAU,OACb,mDACA,uBAAGA,UAAWmC,EAAQG,KAAK,MAA3B,2BAKA,4BAAQtC,UAlBJ,MAmBJ2B,MAAOA,EACP1B,QAAS4B,KAAKJ,sBAFd,gBAMCG,O,GAzHOW,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACT,kBAAC,EAAD,MACEC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.61a1c68e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport './Person.css'\r\n\r\nconst person = (props) =>  {\r\n   /*  const rnd = Math.random();\r\n    if(rnd > 0.7){\r\n        throw new Error('Something went wrong');\r\n    } */\r\nreturn (\r\n    <div className=\"Person\">\r\n        <p onClick={props.click}>I'm a {props.name} and I am {props.age} yrs old!</p>    \r\n        <p>{props.children}</p>\r\n        <input type=\"text\" onChange={props.changed} value={props.name}/>\r\n    </div>\r\n   \r\n)\r\n}\r\n\r\nexport default person;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n//import Radium from 'radium'\nimport Person from './Person/Person';\n//import ErrorBoundary from './ErrorBoundary/ErrorBoundary'\n\nclass App extends Component{\n  \n  state = {\n    persons : [\n      {id:'1', name:'Jen',age:30},\n      {id:'2', name:'Jhazz',age:3},\n      {id:'3', name:'Jamica', age:9}\n    ],\n    otherSate:'some other value',\n    showPersons:false\n  };\n\n  /*  switchNameHandler = (newName) => { \n    //DOnt do this \n    //this.state.persons[0].name = 'Jenny';\n  \n    //Mutate it instead, allows us to update the object\n    this.setState({\n      persons:\n      [\n        {name:newName,age:31},\n        {name:'Jhazz Rhylie',age:3},\n        {name:'Jamica Kate', age:9}\n        \n      ]\n     });\n    }; */\n    deletePersonsHandler = (personIndex) => {\n      // Doesnt have copy and its not safe\n     // const persons = this.state.persons\n     \n     //to securely have a copy of array\n     // const persons = this.state.persons.slice();\n     \n     //more modern way  using spread array\n      const persons = [...this.state.persons];\n      persons.splice(personIndex,1);\n      this.setState({persons:persons});\n    };\n\n     nameChangeHandler = (event, id)=>{\n      const personIndex = this.state.persons.findIndex(p => {\n        return p.id === id;\n      });\n\n      const person = {\n        ...this.state.persons[personIndex]\n      }\n      person.name = event.target.value;\n      const persons = [... this.state.persons];\n      persons[personIndex] = person;\n      this.setState({persons:persons });\n    }\n    togglePersonsHandler = () => {\n       const doesShow = this.state.showPersons;\n       this.setState({showPersons:!doesShow});\n    };\n\n    //Using react, short method\n    render(){\n      const style = {\n        /* backgroundColor:'green',\n        font:'inherit',\n        border:'1px solid blue',\n        padding:'8px',\n        cursor:'pointer' */\n      };\n\n     let personsWithConditions = null;\n     let btnClass=null;\n\n\n     if(this.state.showPersons){\n       personsWithConditions= (\n       <div>\n       {/*   ES6 Javascript */}\n         {\n         this.state.persons.map((person,index) => {\n          return <Person\n            click = {this.deletePersonsHandler.bind(this,index)}\n            name={person.name}\n            age= {person.age} \n            key={person.id}\n            changed={(event) => this.nameChangeHandler(event,person.id)}/>\n        \n              //Key should be move to parent div like error boundary\n           /*  return <ErrorBoundary key={person.id}>\n                      <Person\n                      click = {this.deletePersonsHandler.bind(this,index)}\n                      name={person.name}\n                      age= {person.age} \n                      changed={(event) => this.nameChangeHandler(event,person.id)}/>\n                 </ErrorBoundary>  */\n         })}\n      </div>);\n        style.backgroundColor = 'red';\n     }\n     btnClass=\"red\";\n\n     let classes = [];\n     if(this.state.persons.length <=2){\n       classes.push('red')\n     }\n     if(this.state.persons.length <=1){\n      classes.push('bold')\n    }\n\n      return (\n        <div className=\"App\">\n          <h1>Hi, I'm a React App</h1>\n          <p className={classes.join(' ')}>This is really working!</p>\n         {/*  <button \n          style={style}\n          onClick={this.switchNameHandler.bind(this,'Jenny')}>Switch Name</button> */}\n\n          <button className={btnClass}\n          style={style}\n          onClick={this.togglePersonsHandler}>Show Persons</button>\n          {/*  It can be  inEfficient but can easily pass data without using the bind,\n          but use the bind syntax if you can\n          <button onClick={()=> this.switchNameHandler('Jenn')}></button> */}\n          {personsWithConditions}\n        </div>\n        \n      );\n        //Long Method\n    /* return React.createElement(\n      'div',{className:'App'},\n      React.createElement('h1', null,'Does this work now?')) */\n    }\n}\n\n  \nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n<App/>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}